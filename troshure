#!/bin/sh

# Fancy bookmarking system with terminal and browser interfaces.
# Copyright (C) 2019  Karmjit Mahil
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

APP_NAME=`basename $0`
export APP_NAME

CFG_FILE="$HOME/.config/$APP_NAME/$APP_NAME"
export CFG_FILE

ECHO_HELP="Try '$APP_NAME --help' for more information."
readonly ECHO_HELP

help() {
	echo "Usage: $APP_NAME [-adDlo]"
	echo "\t{ --add | --delete | --delete-db | --list-all | --open | --init }\n"
	echo "\t    --init       path   Initialise database."
	echo "\t                        For more information try '--init --help'"
	echo "\t-a, --add        url    Add a url."
	echo "\t-d, --delete     id     Delete url with ID."
	echo "\t-D, --delete-db         Delete database."
	echo "\t-l, --list-all          List all urls saved."
	echo "\t-o, --open       id     Open url in the browser."
	echo "\t-O, --open-all          Open all urls."
	echo "\t-                       Read from standard input."
	echo "\nDefault behaviour, if no arguments are specified is the same as -O argument."
	exit
}

errorMsg() {
	echo "$APP_NAME: $1\n$ECHO_HELP"
	exit 1
}

if [ "$1" = "--init" ]; then
	sh "$(dirname $0)/troshure_setup" "$2"
	exit "$?"
fi

if [ ! -e "$CFG_FILE" ]; then
	errorMsg "missing configuration: ${CFG_FILE}\nTroshure not setup, use '--init' option."
else
	# Set variables from the config file.
        while read LINE; do
                echo "$LINE" | grep -q -E '^DB |^URL_OPEN_CMD '
                if [ "$?" -eq 0 ]; then
                        VAR_NAME=`echo $LINE | awk '{ print $1 }'`
                        eval "$(echo $LINE | awk '{ print $1 "=\"" $2 "\"" }')"
                        readonly "$VAR_NAME"
                fi
        done < "$CFG_FILE"

	if [ ! "$DB" ]; then
		errorMsg "error in configuration file: ${CFG_FILE}\nDB not set."
	fi

	if [ ! -e "$DB" ]; then
		errorMsg "database not found: $DB"
	fi
fi

add() {
	# Basic url validation
	echo "$1" | grep -q  -E "https?://[0-9A-Za-z]+\..+"
	if [ $? -eq 1 ]; then
		errorMsg "$1: Not a url."
	fi

	cat "$DB" | awk '{ print $2 }' | grep -q "^$1\$"
	if [ $? -eq 0 ]; then
		echo "$1: already saved."
		exit 0
	fi

	# ID of first item added is 1
	LAST_ID=`tail -n 1 "$DB" | awk '{ print $1 }'`
	LAST_ID="${LAST_ID:-0}"
	ID=`expr $LAST_ID + 1`
	echo "${ID} $1" >> $DB
}

delete() {
	# Checks if $1 is an integer.
	echo "$1" | grep -q '^[0-9]*$'
	if [ "$?" = 0 ]; then
		TEXT=`sed "/^${1} ./d" $DB`
		echo -n "$TEXT" > $DB
	else
		errorMsg "$1: Not an ID."
	fi
}

listAll() {
	if [ -s $DB ]; then
		cat "$DB" | awk -F " " 'BEGIN { print "ID\tURL"} { print $1 "\t" $2}'
	else
		echo "No entries."
	fi
}

openAll() {
	URLS=`cat "$DB" | awk '{ print $2 }'`
	# -n option required. wc -l adds one line because of trailing \n of echo
	if [ "$( cat "$DB" | awk '{ print $2 }' | wc -l )" -gt 0 ]; then
		echo "$URLS" | xargs -L 1 "$URL_OPEN_CMD" &
	fi
}

if [ $# -eq 0 ]; then
	openAll
	exit
fi

READ_STDIN=false
if [ "$1" = "-" ]; then
	READ_STDIN=true
	shift
fi

case $1 in
	-h|--help)
		help
		;;

	-a|--add)
		if [ $2 ]; then
			add $2
			shift
		elif $READ_STDIN ; then
			add $(cat /proc/${$}/fd/0)
		else
			errorMsg "No url specified." 1
		fi
		;;
	-d|--delete)
		if [ $2 ]; then
			delete "$2"
			shift
		fi
		;;
	-D|--delete-db)
		echo "The database will be deleted."
		echo "Do you wish to continue (y/n): "
		read RESPONSE
		echo $RESPONSE | grep -q '^[yY]'
		if [ "$?" = 1 ]; then
			exit 0
		fi

		rm $DB
		rm $CFG_FILE
		echo "Database deleted."
		;;
	-l|--list-all)
		listAll
		;;
	-o|--open)
		URL=`cat $DB | grep "^$2" | awk '{print $2}'`
		echo "$URL_OPEN_CMD $URL" | sh -s 2> /dev/null &
		;;
	-O|--open-all)
		openAll
		;;
	*)
		errorMsg "$OPTION: no such option." 1
		;;
esac
