#!/bin/sh

# Fancy bookmarking system with terminal and browser interfaces.
# Copyright (C) 2019  Karmjit Mahil
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

SCRIPT_NAME=`basename $0`
readonly SCRIPT_NAME
export SCRIPT_NAME

CFG_FILE="$HOME/.config/$SCRIPT_NAME/$SCRIPT_NAME"

if [ ! -e "$CFG_FILE" ]; then
	echo "Troshure not setup propperly.\nMissing configuration file: $CFG_FILE"
	exit 1
else
	# Set variables from the config file.
        while read LINE; do
                echo "$LINE" | grep -q -E '^DB |^URL_OPEN_CMD '
                if [ "$?" -eq 0 ]; then
                        VAR_NAME=`echo $LINE | awk '{ print $1 }'`
                        eval "$(echo $LINE | awk '{ print $1 "=\"" $2 "\"" }')"
                        readonly "$VAR_NAME"
                fi
        done < "$CFG_FILE"

	if [ ! "$DB" ]; then
		echo "Error in configuration file: $CFG_FILE"
		echo "DB not set."
		exit 1
	fi

	if [ ! -e "$DB" ]; then
		echo "${SCRIPT_NAME}: database not found: $DB"
		exit 1
	fi
fi

ECHO_HELP="Try '$SCRIPT_NAME --help' for more information."
readonly ECHO_HELP

help() {
	echo "Usage: $SCRIPT_NAME"
	echo "\t{ --add | --delete | --delete-db | --list-all | --open }"
	echo 
	echo "\t-                        Read from standard input."
	echo "\t-a | --add        url    Add a url."
	echo "\t-d | --delete     id     Delete url with ID."
	echo "\t-D | --delete-db         Delete database."
	echo "\t-l | --list-all          List all urls saved."
	echo "\t-o | --open       id     Open url in the browser."
	exit
}

add() {
	# Basic url validation
	echo "$1" | grep -q  -E "https?://[0-9A-Za-z]+\..+"
	if [ $? -eq 1 ]; then
		echo "$1: Not a url."
		exit 1
	fi

	cat "$DB" | awk '{ print $2 }' | grep -q "^$1\$"
	if [ $? -eq 0 ]; then
		echo "$1: Already saved."
		exit
	fi

	# ID of first item added is 1
	LAST_ID=`tail -n 1 "$DB" | awk '{ print $1 }'`
	LAST_ID="${LAST_ID:-0}"
	ID=`expr $LAST_ID + 1`
	echo "${ID} $1" >> $DB
}

delete() {
	# Checks if $1 is an integer.
	echo "$1" | grep -q '^[0-9]*$'
	if [ "$?" = 0 ]; then
		TEXT=`sed "/^${1} ./d" $DB`
		# -n required as /n causes problems if all urls are deleted.
		echo -n "$TEXT" > $DB
	else
		echo "$1: Not an ID."
		exit 1
	fi
}

listAll() {
	if [ -s $DB ]; then
		cat "$DB" | awk -F " " 'BEGIN { print "ID\tURL"} { print $1 "\t" $2}'
	else
		echo "No entries."
	fi
}

openAll() {
	URLS=`cat "$DB" | awk '{ print $2 }'`
	# -n option required. wc -l adds one line because of trailing \n of echo
	if [ "$(echo -n $URLS | wc -l )" -eq 0 ]; then
		echo "No entries."
		exit
	fi
	echo "$URLS" | xargs -L 1 "$URL_OPEN_CMD" &
}

if [ $# -eq 0 ]; then
	openAll
	exit
fi

READ_STDIN=false
if [ "$1" = "-" ]; then
	READ_STDIN=true
	shift
fi

while [ -n "$(echo $1 | grep '-')" ]; do
	case $1 in
		-h|--help)
			help
			exit
			;;

		-a|--add)
			if [ $2 ]; then
				add $2
				shift
			elif $READ_STDIN ; then
				add $(cat /proc/${$}/fd/0)
			else
				echo "No url specified."
				exit 1
			fi
			;;
		-d|--delete)
			if [ $2 ]; then
				delete "$2"
				shift
			fi
			;;
		-D|--delete-db)
			echo "The database will be deleted."
			echo "Do you wish to continue (y/n): "
			read RESPONSE
			echo $RESPONSE | grep -q '^[yY]'
			if [ "$?" = 1 ]; then
				exit 0
			fi

			rm $DB
			rm $CFG_FILE
			echo "Database deleted."
			;;
		-l|--list-all)
			listAll
			exit
			;;
		-o|--open)
			URL=`cat $DB | grep "^$2" | awk '{print $2}'`
			echo "$URL_OPEN_CMD $URL" | sh -s 2> /dev/null &
			exit
			;;
		-O|--open-all)
			openAll
			exit
			;;
		*)
			echo "$SCRIPT_NAME: $OPTION: no such option."
			echo "$ECHO_HELP"
			exit
			;;
	esac
	shift
done
